// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using sip.Core;

#nullable disable

namespace sip.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240908141207_AddedOrganizationToExperiment")]
    partial class AddedOrganizationToExperiment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("sip.Dewars.Tube", b =>
                {
                    b.Property<string>("Structure")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Structure", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Tube");
                });

            modelBuilder.Entity("sip.Documents.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Document");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Document");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("sip.Documents.FileData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("FileData");
                });

            modelBuilder.Entity("sip.Documents.FileInDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentFileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FileMetadataId");

                    b.ToTable("FileInDocument");
                });

            modelBuilder.Entity("sip.Documents.FileMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FileDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileDataId");

                    b.ToTable("FileMetadata");
                });

            modelBuilder.Entity("sip.Experiments.Logs.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Dt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ExperimentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("sip.Experiments.Model.Experiment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtStateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("NotifyUser")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.Property<string>("OrganizationUserId")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondaryId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Technique")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SampleId");

                    b.HasIndex("UserId");

                    b.ToTable("Experiment");
                });

            modelBuilder.Entity("sip.Experiments.Model.ExperimentProcessing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DtLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExperimentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Node")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Pid")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("ProcessingEngine")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkflowRef")
                        .HasColumnType("text");

                    b.Property<string>("WorkflowSerialized")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId")
                        .IsUnique();

                    b.ToTable("ExperimentProcessing");
                });

            modelBuilder.Entity("sip.Experiments.Model.ExperimentPublication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Doi")
                        .HasColumnType("text");

                    b.Property<DateTime>("DtEmbargo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmbargoPeriod")
                        .IsRequired()
                        .HasColumnType("character varying(48)");

                    b.Property<Guid>("ExperimentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Node")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PublicationEngine")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId")
                        .IsUnique();

                    b.ToTable("ExperimentPublication");
                });

            modelBuilder.Entity("sip.Experiments.Model.ExperimentStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Archive")
                        .HasColumnType("boolean");

                    b.Property<bool>("Clean")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DtExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtLastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExperimentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExpirationPeriod")
                        .IsRequired()
                        .HasColumnType("character varying(48)");

                    b.Property<bool>("KeepSourceFiles")
                        .HasColumnType("boolean");

                    b.Property<string>("Node")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("SourceDirectory")
                        .HasColumnType("text");

                    b.Property<string>("SourcePatternsStr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StorageEngine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubPath")
                        .HasColumnType("text");

                    b.Property<string>("Target")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId")
                        .IsUnique();

                    b.ToTable("ExperimentStorage");
                });

            modelBuilder.Entity("sip.Experiments.Samples.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<string>("KeywordsStr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sample");
                });

            modelBuilder.Entity("sip.LabIssues.Issue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DtAssigned")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtLastChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtLastNotified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtObserved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InitiatedById")
                        .HasColumnType("uuid");

                    b.Property<double>("NotifyIntervalDays")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SolutionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Urgency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatedById");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("Issue");
                });

            modelBuilder.Entity("sip.Messaging.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtStatusChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InResponseToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MimeHeaders")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InResponseToId");

                    b.HasIndex("MessageDataId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Message");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("sip.Messaging.MessageData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MessageData");
                });

            modelBuilder.Entity("sip.Messaging.MessageRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageRecipient");
                });

            modelBuilder.Entity("sip.Organizations.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Organization");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Organization");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("sip.Projects.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentId")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Project");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Project");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("sip.Projects.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MemberType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MemberUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("MemberUserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMember");
                });

            modelBuilder.Entity("sip.Projects.ProjectsFilterUserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProjectsFilter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectsFilterUserSettings");
                });

            modelBuilder.Entity("sip.Projects.Statuses.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DtEntered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtLeft")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EnteredFromStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LeftToStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.Property<string>("StatusInfoId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("EnteredFromStatusId");

                    b.HasIndex("LeftToStatusId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusInfoId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("sip.Projects.Statuses.StatusInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StatusInfo");
                });

            modelBuilder.Entity("sip.Userman.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("AppRole");
                });

            modelBuilder.Entity("sip.Userman.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AppUsers", (string)null);
                });

            modelBuilder.Entity("sip.Userman.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Affiliation")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Position")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("ContactId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("sip.Userman.UserInRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInRole");
                });

            modelBuilder.Entity("sip.Documents.Proposals.Proposal", b =>
                {
                    b.HasBaseType("sip.Documents.Document");

                    b.Property<DateTime>("DtEvaluated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DtSubmitted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EvaluatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpectedEvaluatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProposalState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("EvaluatedById");

                    b.HasIndex("ExpectedEvaluatorId");

                    b.HasDiscriminator().HasValue("Proposal");
                });

            modelBuilder.Entity("sip.Experiments.Model.ExperimentDocument", b =>
                {
                    b.HasBaseType("sip.Documents.Document");

                    b.HasDiscriminator().HasValue("ExperimentDocument");
                });

            modelBuilder.Entity("sip.Experiments.Model.ExperimentProcessingDocument", b =>
                {
                    b.HasBaseType("sip.Documents.Document");

                    b.Property<Guid>("ExperimentProcessingId")
                        .HasColumnType("uuid");

                    b.HasIndex("ExperimentProcessingId");

                    b.HasDiscriminator().HasValue("ExperimentProcessingDocument");
                });

            modelBuilder.Entity("sip.Messaging.ProjectOrganizationMessage", b =>
                {
                    b.HasBaseType("sip.Messaging.Message");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("character varying(128)");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasDiscriminator().HasValue("ProjectOrganizationMessage");
                });

            modelBuilder.Entity("sip.CEITEC.Company", b =>
                {
                    b.HasBaseType("sip.Organizations.Organization");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("sip.CEITEC.ResearchCenter", b =>
                {
                    b.HasBaseType("sip.Organizations.Organization");

                    b.HasDiscriminator().HasValue("ResearchCenter");
                });

            modelBuilder.Entity("sip.CEITEC.ResearchFacility", b =>
                {
                    b.HasBaseType("sip.Organizations.Organization");

                    b.HasDiscriminator().HasValue("ResearchFacility");
                });

            modelBuilder.Entity("sip.CEITEC.ResearchInfrastructure", b =>
                {
                    b.HasBaseType("sip.Organizations.Organization");

                    b.HasDiscriminator().HasValue("ResearchInfrastructure");
                });

            modelBuilder.Entity("sip.CEITEC.CIISB.CProject", b =>
                {
                    b.HasBaseType("sip.Projects.Project");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Publications")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("CProject");
                });

            modelBuilder.Entity("sip.CEITEC.DirectAccess.DProject", b =>
                {
                    b.HasBaseType("sip.Projects.Project");

                    b.HasDiscriminator().HasValue("DProject");
                });

            modelBuilder.Entity("sip.Experiments.EProject", b =>
                {
                    b.HasBaseType("sip.Projects.Project");

                    b.HasDiscriminator().HasValue("EProject");
                });

            modelBuilder.Entity("sip.CEITEC.CIISB.Proposals.Creation.CCreationProposal", b =>
                {
                    b.HasBaseType("sip.Documents.Proposals.Proposal");

                    b.Property<string>("CProposalFormModel")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("CCreationProposal");
                });

            modelBuilder.Entity("sip.CEITEC.CIISB.Proposals.Extension.CExtensionProposal", b =>
                {
                    b.HasBaseType("sip.Documents.Proposals.Proposal");

                    b.Property<string>("ExtensionResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("CExtensionProposal");
                });

            modelBuilder.Entity("sip.CEITEC.CIISB.Proposals.PeerReview.PeerReview", b =>
                {
                    b.HasBaseType("sip.Documents.Proposals.Proposal");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Document", t =>
                        {
                            t.Property("Comments")
                                .HasColumnName("PeerReview_Comments");

                            t.Property("Result")
                                .HasColumnName("PeerReview_Result");
                        });

                    b.HasDiscriminator().HasValue("PeerReview");
                });

            modelBuilder.Entity("sip.CEITEC.CIISB.Proposals.TechnicalFeasibility.TechnicalFeasiblility", b =>
                {
                    b.HasBaseType("sip.Documents.Proposals.Proposal");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("TechnicalFeasiblility");
                });

            modelBuilder.Entity("sip.CEITEC.DirectAccess.Proposals.Creation.DCreationProposal", b =>
                {
                    b.HasBaseType("sip.Documents.Proposals.Proposal");

                    b.Property<string>("DProposalFormModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("DCreationProposal");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("sip.Userman.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("sip.Userman.AppUser", null)
                        .WithMany("IdentityUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("sip.Userman.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sip.Dewars.Tube", b =>
                {
                    b.HasOne("sip.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("sip.Documents.Document", b =>
                {
                    b.HasOne("sip.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("sip.Projects.Project", "Project")
                        .WithMany("ProjectDocuments")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Organization");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("sip.Documents.FileInDocument", b =>
                {
                    b.HasOne("sip.Documents.Document", "Document")
                        .WithMany("FilesInDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Documents.FileMetadata", "FileMetadata")
                        .WithMany("FileInDocuments")
                        .HasForeignKey("FileMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("FileMetadata");
                });

            modelBuilder.Entity("sip.Documents.FileMetadata", b =>
                {
                    b.HasOne("sip.Documents.FileData", "FileData")
                        .WithMany()
                        .HasForeignKey("FileDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileData");
                });

            modelBuilder.Entity("sip.Experiments.Logs.Log", b =>
                {
                    b.HasOne("sip.Experiments.Model.Experiment", "Experiment")
                        .WithMany("Logs")
                        .HasForeignKey("ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Experiment");
                });

            modelBuilder.Entity("sip.Experiments.Model.Experiment", b =>
                {
                    b.HasOne("sip.Userman.AppUser", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Organizations.Organization", "OrganizationUser")
                        .WithMany()
                        .HasForeignKey("OrganizationUserId");

                    b.HasOne("sip.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("sip.Experiments.Samples.Sample", "Sample")
                        .WithMany("InExperiments")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Userman.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationUser");

                    b.Navigation("Project");

                    b.Navigation("Sample");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sip.Experiments.Model.ExperimentProcessing", b =>
                {
                    b.HasOne("sip.Experiments.Model.Experiment", "Experiment")
                        .WithOne("Processing")
                        .HasForeignKey("sip.Experiments.Model.ExperimentProcessing", "ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experiment");
                });

            modelBuilder.Entity("sip.Experiments.Model.ExperimentPublication", b =>
                {
                    b.HasOne("sip.Experiments.Model.Experiment", "Experiment")
                        .WithOne("Publication")
                        .HasForeignKey("sip.Experiments.Model.ExperimentPublication", "ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experiment");
                });

            modelBuilder.Entity("sip.Experiments.Model.ExperimentStorage", b =>
                {
                    b.HasOne("sip.Experiments.Model.Experiment", "Experiment")
                        .WithOne("Storage")
                        .HasForeignKey("sip.Experiments.Model.ExperimentStorage", "ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experiment");
                });

            modelBuilder.Entity("sip.LabIssues.Issue", b =>
                {
                    b.HasOne("sip.Userman.AppUser", "InitiatedBy")
                        .WithMany()
                        .HasForeignKey("InitiatedById");

                    b.HasOne("sip.Userman.AppUser", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId");

                    b.Navigation("InitiatedBy");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("sip.Messaging.Message", b =>
                {
                    b.HasOne("sip.Messaging.Message", "InResponseTo")
                        .WithMany()
                        .HasForeignKey("InResponseToId");

                    b.HasOne("sip.Messaging.MessageData", "MessageData")
                        .WithMany()
                        .HasForeignKey("MessageDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Userman.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("InResponseTo");

                    b.Navigation("MessageData");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("sip.Messaging.MessageRecipient", b =>
                {
                    b.HasOne("sip.Messaging.Message", "Message")
                        .WithMany("Recipients")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Userman.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sip.Organizations.Organization", b =>
                {
                    b.HasOne("sip.Organizations.Organization", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("sip.Projects.Project", b =>
                {
                    b.HasOne("sip.Projects.Project", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.OwnsOne("sip.Projects.AffiliationDetails", "AffiliationDetails", b1 =>
                        {
                            b1.Property<string>("ProjectId")
                                .HasColumnType("character varying(128)");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("character varying(1024)");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Project");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("AffiliationDetails")
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("sip.Projects.ProjectMember", b =>
                {
                    b.HasOne("sip.Userman.AppUser", "MemberUser")
                        .WithMany()
                        .HasForeignKey("MemberUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("sip.Projects.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemberUser");

                    b.Navigation("Organization");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("sip.Projects.ProjectsFilterUserSettings", b =>
                {
                    b.HasOne("sip.Userman.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sip.Projects.Statuses.Status", b =>
                {
                    b.HasOne("sip.Projects.Statuses.Status", "EnteredFromStatus")
                        .WithMany()
                        .HasForeignKey("EnteredFromStatusId");

                    b.HasOne("sip.Projects.Statuses.Status", "LeftToStatus")
                        .WithMany()
                        .HasForeignKey("LeftToStatusId");

                    b.HasOne("sip.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Projects.Project", "Project")
                        .WithMany("ProjectStatuses")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Projects.Statuses.StatusInfo", "StatusInfo")
                        .WithMany("StatusesOfStatusInfo")
                        .HasForeignKey("StatusInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnteredFromStatus");

                    b.Navigation("LeftToStatus");

                    b.Navigation("Organization");

                    b.Navigation("Project");

                    b.Navigation("StatusInfo");
                });

            modelBuilder.Entity("sip.Userman.AppRole", b =>
                {
                    b.HasOne("sip.Userman.AppRole", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("sip.Userman.Contact", b =>
                {
                    b.HasOne("sip.Userman.AppUser", "AppUser")
                        .WithMany("Contacts")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("sip.Userman.UserInRole", b =>
                {
                    b.HasOne("sip.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("sip.Userman.AppRole", "Role")
                        .WithMany("UserInRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Userman.AppUser", "User")
                        .WithMany("UserInRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sip.Documents.Proposals.Proposal", b =>
                {
                    b.HasOne("sip.Userman.AppUser", "EvaluatedBy")
                        .WithMany()
                        .HasForeignKey("EvaluatedById");

                    b.HasOne("sip.Userman.AppUser", "ExpectedEvaluator")
                        .WithMany()
                        .HasForeignKey("ExpectedEvaluatorId");

                    b.Navigation("EvaluatedBy");

                    b.Navigation("ExpectedEvaluator");
                });

            modelBuilder.Entity("sip.Experiments.Model.ExperimentProcessingDocument", b =>
                {
                    b.HasOne("sip.Experiments.Model.ExperimentProcessing", "ExperimentProcessing")
                        .WithMany("ExperimentProcessingDocuments")
                        .HasForeignKey("ExperimentProcessingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExperimentProcessing");
                });

            modelBuilder.Entity("sip.Messaging.ProjectOrganizationMessage", b =>
                {
                    b.HasOne("sip.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sip.Projects.Project", "Project")
                        .WithMany("ProjectOrganizationMessages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("sip.Documents.Document", b =>
                {
                    b.Navigation("FilesInDocuments");
                });

            modelBuilder.Entity("sip.Documents.FileMetadata", b =>
                {
                    b.Navigation("FileInDocuments");
                });

            modelBuilder.Entity("sip.Experiments.Model.Experiment", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Processing")
                        .IsRequired();

                    b.Navigation("Publication")
                        .IsRequired();

                    b.Navigation("Storage")
                        .IsRequired();
                });

            modelBuilder.Entity("sip.Experiments.Model.ExperimentProcessing", b =>
                {
                    b.Navigation("ExperimentProcessingDocuments");
                });

            modelBuilder.Entity("sip.Experiments.Samples.Sample", b =>
                {
                    b.Navigation("InExperiments");
                });

            modelBuilder.Entity("sip.Messaging.Message", b =>
                {
                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("sip.Organizations.Organization", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("sip.Projects.Project", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ProjectDocuments");

                    b.Navigation("ProjectMembers");

                    b.Navigation("ProjectOrganizationMessages");

                    b.Navigation("ProjectStatuses");
                });

            modelBuilder.Entity("sip.Projects.Statuses.StatusInfo", b =>
                {
                    b.Navigation("StatusesOfStatusInfo");
                });

            modelBuilder.Entity("sip.Userman.AppRole", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("UserInRoles");
                });

            modelBuilder.Entity("sip.Userman.AppUser", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("IdentityUserLogins");

                    b.Navigation("UserInRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
