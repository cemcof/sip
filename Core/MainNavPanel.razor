@inject IOptionsMonitor<MainGuiOptions> GuiOpts
@inject IAuthorizationService AuthorizationService
@inject IOrganizationProvider OrganizationProvider
@inject IConfiguration Configuration
@inject ILogger<MainNavPanel> Logger
<nav>

    @* Render brand part *@
    <NavLink href="/" class="brand">
        @{ var mainGui = GuiOpts.CurrentValue!; }

        @if (mainGui.LogoPath is not null)
        {
            <img src="@mainGui.LogoPath" alt="@mainGui.BrandText"/>
        }

        @if (mainGui.BrandText is not null)
        {
            <div>@mainGui.BrandText</div>
        }
    </NavLink>
    <hr/>

    @* Render identity part *@
    <IdentityPanel Organization="@ComponentContext.Organization"/>
    <hr/>

    @* Render main navigation links *@
    <ul class="navlinks">
        @foreach (var nl in _renderMainModules)
        {
            <li>
                <NavLink href="@GetFullLinkHref(null, nl.Value.LinkHref)">
                    @if (nl.Value.CssIcon is not null)
                    {
                        <i class="@nl.Value.CssIcon"></i>
                    }
                    <span class="nav-item-caption" >&nbsp; @nl.Value.DisplayText </span>
                </NavLink>
            </li>
        }
    </ul>


    @* Render organizations and their navigation links  *@
    @foreach (var org in _renderOrgsModules)
    {
        <div class="navlinks-header">@org.Key.Abbreviation</div>
        <hr/>

        <ul class="navlinks">
            @foreach (var nl in org.Value)
            {
                <li>
                    <NavLink href="@GetFullLinkHref(org.Key, nl.Value.LinkHref)">
                        @if (nl.Value.CssIcon is not null)
                        {
                            <i class="@nl.Value.CssIcon"></i>
                        }
                        &nbsp; @nl.Value.DisplayText
                    </NavLink>
                </li>
            }
        </ul>
    }


</nav>


@code {

    [CascadingParameter]
    public OrganizationComponentContext ComponentContext { get; set; } = null!;

    private Dictionary<IOrganization, Dictionary<string, PanelItemOptions>> _renderOrgsModules = new();
    private Dictionary<string, PanelItemOptions> _renderMainModules = new();

    private string GetFullLinkHref(IOrganization? org, string link)
        => (org is null) ?
            link :
            "/" + org.LinkId + "/" + link;

    protected override async Task OnParametersSetAsync()
    {
        Logger.LogDebug("OnParametersSetAsync MainNavPanel: {@ComponentContext}", ComponentContext);

        Dictionary<IOrganization, Dictionary<string, PanelItemOptions>> renderOrgsModules = new();

        async Task<Dictionary<string, PanelItemOptions>> GetModulesToRender(Dictionary<string, PanelItemOptions> modules, IOrganization? organization = null)
        {
            var result = new Dictionary<string, PanelItemOptions>();
            foreach (var mainOptsModule in modules)
            {
                var authReqs = mainOptsModule.Value.GetAuthorizationRequirements(organization).ToArray();
                if (mainOptsModule.Value.Render &&
                    (!authReqs.Any() || (await AuthorizationService.AuthorizeAsync(ComponentContext.PrincipalUser, null, authReqs)).Succeeded)
                    )
                {
                    result.Add(mainOptsModule.Key, mainOptsModule.Value);
                }
            }
            return result;
        }

    // Authorize main modules 
        Dictionary<string, PanelItemOptions> renderMainModules = await GetModulesToRender(GuiOpts.CurrentValue.Modules);

    // Authorize org modules
    // First get list of organizations with some modules configured
        var orgs = OrganizationProvider.GetAll();
    // Now go over the organizations but authorize only those that have some modules configured
        foreach (var organization in orgs)
        {
            var orgOptions = GuiOpts.Get(organization).Modules;
            var authorized = await GetModulesToRender(orgOptions, organization);
            if (authorized.Any())
            {
                renderOrgsModules.Add(organization, authorized);
            }
        }

        _renderMainModules = renderMainModules;
        _renderOrgsModules = renderOrgsModules;

        Logger.LogDebug("End OnParametersSetAsync MainNavPanel: {@ComponentContext}", ComponentContext);
    }

}