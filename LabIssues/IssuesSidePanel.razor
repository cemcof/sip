@inject IssuesService IssuesService
@inject AppUserManager UserManager

<NullAware TValue="Issue" Value="_issue">
    <WhenReady Context="issue">
        <div class="create-issue-container" @onclick="NewIssueCancel">
            @if (!CreateNew && issue.Status is not IssueStatus.Resolved)
            {
                
                <BsEditForm @onclick:stopPropagation="@true"
                            novalidate class="create-issue-form cform"
                            Model="@issue" OnValidSubmit="IssueResolveSubmit">

                    <InputBasedValidator></InputBasedValidator>

                    <InputAligner Flex="0 0 10rem, 1">

                        <h4 class="text-center">Resolve issue</h4>
                        <hr/>
                        <CTextInput IsRequired="@true" @bind-Value="@issue.SolutionDescription" AreaStyle="CTextInput.Area.Medium"></CTextInput>
                        <button type="submit" class="btn btn-sm btn-success me-2 w-100 my-2">Click to resolve</button>

                        <p class="text-center">or</p>
                        
                    </InputAligner>

                </BsEditForm>
            }

            <BsEditForm @onclick:stopPropagation="@true"
                        novalidate class="create-issue-form cform"
                        Model="@issue" OnValidSubmit="IssueSubmit" >

                <InputBasedValidator></InputBasedValidator>

                <InputAligner Flex="0 0 10rem, 1">
                    @if (CreateNew)
                    {
                        <h4 class="text-center">Create issue details</h4>
                    }
                    else
                    {
                        <h4 class="text-center">Edit issue details</h4>
                    }
                    <hr/>

                    <ReadonlyStatus Enabled="@(issue.Status is IssueStatus.Resolved)">
                        <CTextInput @bind-Value="@issue.Subject"></CTextInput>
                        <CTextInput @bind-Value="@issue.Description" AreaStyle="CTextInput.Area.Medium"></CTextInput>

                        @if (issue.Status is IssueStatus.Resolved)
                        {
                            <CTextInput @bind-Value="@issue.SolutionDescription" AreaStyle="CTextInput.Area.Medium"></CTextInput>
                        }
                        
                        <CObjectInput TItem="AppUser" @bind-Value="@issue.InitiatedBy"
                                      ItemProvider="UserManager.GetItems">
                            <ItemTemplate Context="userResponsible">@userResponsible.Fullcontact</ItemTemplate>
                        </CObjectInput>

                        <CObjectInput TItem="AppUser" @bind-Value="@issue.Responsible"
                                      ItemProvider="UserManager.GetItems">
                            <ItemTemplate Context="userResponsible">@userResponsible.Fullcontact</ItemTemplate>
                        </CObjectInput>

                        <CDateInput InputDateType="@InputDateType.DateTimeLocal" @bind-Value="@issue.DtObserved"></CDateInput>

                        <CRadioList TValue="IssueUrgency" @bind-Value="@issue.Urgency"></CRadioList>
                    </ReadonlyStatus>

                </InputAligner>

                <ReadonlyStatus Enabled="@(issue.Status is IssueStatus.Resolved)">
                    <CNumberInput TNumberType="Double" Flex="0 0 10rem, 5rem, 1" @bind-Value="@issue.NotifyIntervalDays"></CNumberInput>
                </ReadonlyStatus>

                <div class="btn-group-sm d-flex justify-content-center mt-5">
                    @if (CreateNew)
                    {
                        <button type="submit" class="btn btn-sm btn-primary me-2">Create</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-sm btn-primary me-2">Save</button>
                    }

                    <button type="button" @onclick="NewIssueCancel" class="btn btn-sm btn-secondary">Cancel</button>
                </div>

            </BsEditForm>
        </div>
    </WhenReady>
</NullAware>


@code {
    
    
    [Parameter]
    public Issue? Issue { get; set; }
    
    private bool CreateNew => Issue is null;

    private Issue? _issue;
    
    [Parameter]
    public EventCallback IssueUpdated { get; set; }
    [Parameter]
    public EventCallback IssueCreated { get; set; }
    [Parameter]
    public EventCallback Cancelled { get; set; }
    

    protected override void OnParametersSet()
    {
        if (CreateNew)
        {
            _issue ??= IssuesService.CreateItem();
        }
        else
        {
            _issue = Issue;
        }
        
    }
    
    private async Task IssueSubmit()
    {
        if (_issue is null) throw new InvalidOperationException();
        
        if (CreateNew)
        {
            await IssuesService.PersistItem(_issue);
            await IssueCreated.InvokeAsync();
        }
        else
        {
            await IssuesService.UpdateItem(_issue);
            await IssueUpdated.InvokeAsync();
        }
    }

    private void NewIssueCancel()
    {
        Cancelled.InvokeAsync();
    }

    private async Task IssueResolveSubmit()
    {
        if (_issue is null) throw new InvalidOperationException();
        
        _issue.Status = IssueStatus.Resolved;
        await IssuesService.UpdateItem(_issue);
        await IssueUpdated.InvokeAsync();
    }

}