@page "/{OrganizationId}/issues/{IssueId?}"
@inherits OrganizationComponentBase

@inject IssuesService IssuesService

@* Issues header *@
<div class="d-flex align-items-stretch">
    <InteractiveButton Caption="New issue" 
                       ContainerClass="me-1"
                       CssIcon="bi bi-plus-circle"
                       BtnClass="btn btn-sm btn-primary"
                       OnClick="@_onNewIssueClick">
        
    </InteractiveButton>
    
    <SearchBar Placeholder="Search issues (by user, description, date, status...)" 
               RequestSearch="@_onSearch"/>
</div>

<div class="container-fluid">
    @* Render issues *@
    @if (_issueCreate is not null)
    {
        <IssueCreateComponent IssueCreate="@_issueCreate" />
    }

    @foreach (var issue in _issues)
    {
        <IssueView Issue="@issue"/>
    }
</div>

@code {
    
    [Parameter] public string? IssueId { get; set; }

    private IssueCreate? _issueCreate;
    private List<Issue> _issues = new();
    private Issue? _selectedIssue = null!;

    protected override async Task OnParametersSetAsync()
    {
        // Load issues and then select issue, if given by param
        _issues = (await IssuesService.GetItems()).ToList();
    }

    private Task _onSearch((string, CancellationToken) searchRequest)
    {
        throw new NotImplementedException();
    }

    private Task _onNewIssueClick()
    {
        // _issueCreate = new IssueCreate(AuthUser)
        // {
        // };
        return Task.CompletedTask;
    }

}