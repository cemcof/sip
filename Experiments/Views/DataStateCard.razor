@using sip.Experiments.Model

@inject ExperimentPublicationService ExperimentPublicationService

@* For expired data  *@
@if (Exp is {Storage.State: StorageState.Expired or StorageState.ExpirationRequested or StorageState.Expiring})
{
    <section class="card border-info mx-0 my-1">
        <div class="card-header">
            <span class="fw-bold">Data status</span>
        </div>
        
        <div class="card-body">
            <span class="card-text">Expired @Exp.Storage.DtExpiration.StandardFormat() (@Exp.Storage.DtExpiration.HumanizeTimedelta()). The
                dataset is no longer available on our storages.</span>
        </div>
    </section>
}


@* For data to be expired, not archived *@

@if (!Exp.Storage.Archive && Exp is {Storage.State: StorageState.Idle})
{
    <section class="card border-warning mx-0 my-1">
        
        <div class="card-header d-flex justify-content-between align-items-center">
            <span class="fw-bold">Data status</span>
            
            <ConditionalRender Condition="@ExperimentPublicationService.CanEnablePublication(Exp)">
                <TrueContent>
                    <InteractiveButton Caption="Archive and publish this dataset"
                                       BtnClass="btn btn-outline-primary btn-sm"
                                       OnClick="@OnEnablePublishRequest"
                                       Tip="Use only if the data is relevant enough to be preserved. This will mark the experiment dataset to be archived and published.">
                        <ConfirmTemplate>
                            <div class="d-flex">
                                <p class="me-2">Are you sure to archive and publish this dataset?</p>
                                <button class="btn btn-sm btn-primary" @onclick="context.ConfirmAsync">Yes, archive and publish</button>
                                <button class="btn btn-sm btn-secondary" @onclick="context.CancelAsync">No, cancel</button>
                            </div>
                        </ConfirmTemplate>
                    </InteractiveButton>
                </TrueContent>
            </ConditionalRender>
        </div>

        <div class="card-body">
            <p class="card-title fw-bold">Expiration: @Exp.Storage.DtExpiration.StandardFormat() (@Exp.Storage.DtExpiration.HumanizeTimedelta())</p>
            <p class="card-text">Since this dataset has not been marked to be archived, it will be deleted from our storage services by the date above.
                Please download the dataset before this moment to your storage as described below.</p>
        </div>
    </section>
}


@* For data to be archived and published *@

@if (Exp.Storage.Archive && Exp.Publication.State is PublicationState.DraftCreated or PublicationState.DraftCreationRequested or PublicationState.PublicationRequested)
{
    <section class="card border-success mx-0 my-1">
        
        <div class="card-header d-flex justify-content-between align-items-center">
            <span class="fw-bold">Data status: @Exp.Publication.State.Humanize()</span>
            
            <ConditionalRender Condition="@ExperimentPublicationService.CanDisablePublication(Exp)">
                <TrueContent>
                    <InteractiveButton Caption="Do not archive and publish this dataset"
                                       BtnClass="btn btn-outline-primary btn-sm"
                                       OnClick="@OnDisablePublishRequest"
                                       Tip="Use if the data is not relevant enough to be preserved. This will mark the experiment dataset to eventually expire.">
                        <ConfirmTemplate>
                            <div class="d-flex">
                                <p class="me-2">Are you sure not to archive and publish this dataset?</p>
                                <button class="btn btn-sm btn-primary" @onclick="context.ConfirmAsync">Yes, do not archive and publish</button>
                                <button class="btn btn-sm btn-secondary" @onclick="context.CancelAsync">No, cancel</button>
                            </div>
                        </ConfirmTemplate>
                    </InteractiveButton>
                </TrueContent>
            </ConditionalRender>
        </div>

        <div class="card-body">
            <p class="card-title fw-bold">Embargo ends: @Exp.Publication.DtEmbargo.StandardFormat() (@Exp.Publication.DtEmbargo.HumanizeTimedelta())</p>
            <p class="card-text">Since this dataset has been marked to be archived, it is expected to be assigned public identifier (DOI) and made publicly available either automatically after embargo period or earlier on your decision.</p>
        </div>

        <div class="card-footer">
            @if (Exp.Publication.State is PublicationState.PublicationRequested)
            {
                <p class="text-info m-0">Publication has been requested</p>
            }
            else
            {
                <InteractiveButton Caption="Request publication now"
                                   BtnClass="btn btn-secondary btn-sm"
                                   OnClick="@(() => ExperimentPublicationService.RequestPublicationAsync(Exp))">
                    <ConfirmTemplate>
                        <div class="d-flex">
                            <p class="me-2">This is irreversible action, the dataset will marked as ready for publication</p>
                            <button class="btn btn-sm btn-primary" @onclick="context.ConfirmAsync">Yes, request publication</button>
                            <button class="btn btn-sm btn-secondary" @onclick="context.CancelAsync">No, cancel</button>
                        </div>
                    </ConfirmTemplate>
                </InteractiveButton>
            }
        </div>
    </section>
}

@* For published data *@

@if (Exp.Publication.State is PublicationState.Published)
{
    <section class="card border-success mx-0 my-1">
        <div class="card-header">
            <span class="fw-bold">Data status</span>
        </div>
        
        <div class="card-body">
            <p>
                <span class="fw-bold">
                    Published at
                </span>
                <br/>
                <a href="@Exp.Publication.TargetUrl" target="_blank">
                    @Exp.Publication.TargetUrl
                </a>
            </p>

            <hr/>

            <p>
                <span class="fw-bold">
                    DOI
                </span>
                <br/>

                @if (Exp.Publication.Doi is not null)
                {
                    <a href="@Doi.GetDoiUrl(Exp.Publication.Doi).url">@Exp.Publication.Doi</a>
                }
                else
                {
                    <span>-</span>
                }
            </p>
        </div>
    </section>
}


@code {
    [Parameter] public Experiment Exp { get; set; } = null!;
    
   
    private Task OnDisablePublishRequest(object arg)
     => ExperimentPublicationService.DisablePublicationAsync(Exp);
    
    private Task OnEnablePublishRequest(object arg)
     => ExperimentPublicationService.EnablePublicationAsync(Exp);

}