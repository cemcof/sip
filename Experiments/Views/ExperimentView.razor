@using sip.Experiments.Model
@using sip.Experiments.Workflows

@inject ExperimentEngine ExperimentEngine
@inject IWorkflowProvider WorkflowProvider
@inject IOptionsMonitor<ExperimentsOptions> ExperimentsOptions

<div class="card m-0">

    <div class="card-header @ExperimentsOptions.Get(Exp.Organization).FindTheme(Exp) d-flex align-items-center justify-content-between">
        
        <h1>@Exp.SecondaryId - @Exp.Sample.Name </h1>

        @if (IsHeadlessPage)
        {
            // From headless page we can print 
            <a class="btn btn-outline-light print-btn" href="javascript:window.print()"><i class="bi bi-printer"></i> Print / PDF</a>
        }
        else
        {
            <a href="/experiment/@Exp.Id" target="_blank"><i class="bi fs-3 text-white bi-box-arrow-up-right"></i></a>
        }
    
    </div>

    <div class="card-body">
            
        <table class="table table-sm table-striped">
            <tbody>
                <tr>
                    <th scope="row">Center</th>
                    <td>@Exp.Organization.Abbreviation</td>
                </tr>
                <tr>
                    <th scope="row">Operator</th>
                    <td>@Exp.Operator.Fullcontact</td>
                </tr>
                <tr>
                    <th scope="row">User</th>
                    <td>@Exp.User.Fullcontact</td>
                </tr>
                <tr>
                    <th scope="row">Experiment started</th>
                    <td>@Exp.DtCreated</td>
                </tr>
                <tr>
                    <th scope="row">Instrument</th>
                    <td>@Exp.InstrumentName</td>
                </tr>
                <tr>
                    <th scope="row">Experiment technique</th>
                    <td>@Exp.Technique</td>
                </tr>
                <tr>
                    <th scope="row">Sample</th>
                    <td>@Exp.Sample.Name</td>
                </tr>
                <tr>
                    <th scope="row">Sample keywords</th>
                    <td>@Exp.Sample.KeywordsStr</td>
                </tr>
            </tbody>
        </table>
    </div>
    
</div>

<DataStateCard Exp="Exp" OnPublicationRequest="@((exp) => ExperimentEngine.RequestPublicationAsync(exp))"></DataStateCard>

@if (Exp.Storage.State is StorageState.Idle or StorageState.Archived)
{
    
    <section class="card m-0">
        
        <div class="card-header fw-bold">
            Data access
        </div>
        
        <div class="card-body">
            
            @if (Exp.Storage.StorageEngine.StartsWith("irods"))
            {
                <p>Your dataset has been stored in iRODS cloud. To <strong>download your data</strong>, use our prepared script</p>

                <p><strong>On Linux <i class="fab fa-linux"></i> / macOS <i class="fab fa-apple"></i>:</strong></p>

                <ol>
                    <li>Open terminal and navigate to the directory where you want to download your data</li>
                    <li>Copy following command, which will download a script that will execute and download the dataset.
                        <CopiableCode CodeContent="@_GetIrodsFetchUnixOneliner()"></CopiableCode>
                    </li>
                    <li>Paste it to the terminal and hit enter, follow instructions if any</li>
                </ol>

                <p><strong>On Windows <i class="bi bi-windows text-primary">:</i></strong></p>

                <ol>
                    <li>Go to a folder where you want do download your data</li>
                    <li>Hold shift and right click</li>
                    <li>Select "Open Powershell here"</li>
                    <li>Copy following command:
                        <CopiableCode CodeContent="@_GetPowershellFetch()"></CopiableCode>
                    </li>
                    <li>Paste it to the powershell window and hit enter, follow instructions if any</li>
                </ol>

                @* <div class="access-ways-container"> *@
                @*     <div class="simple-card"> *@
                @*         <div class="header">On Windows</div>  *@
                @*         <div class="body"> *@
                @*         </div> *@
                @*     </div> *@
                @*      *@
                @*     <div class="simple-card"> *@
                @*         <div class="header">On Linux/macOS</div> *@
                @*         <div class="body"> *@
                @*             <ol> *@
                @*                 <li>Open terminal and navigate to the directory where you want to download your data</li> *@
                @*                 <li>Copy following command:  *@
                @*                     <CopiableCode CodeContent="@_GetIrodsFetchUnixOneliner()"></CopiableCode> *@
                @*                 </li> *@
                @*                 <li>Paste it to the terminal and hit enter, follow instructions if any</li> *@
                @*             </ol> *@
                @*         </div> *@
                @*     </div> *@
                @*      *@
                @* </div> *@

            }

            @if (Exp.Storage.StorageEngine.StartsWith("fs"))
            {
                <p>The dataset has been stored at the following location, and you can access it provided that you were
                    given credentials (username/password/ssh key) by the facility: <br/> <code>@_SshTarget()</code></p>
                
                <p>
                    <strong>On Windows <i class="bi bi-windows text-primary"></i></strong>, you can use for example <a target="_blank" href="https://winscp.net/">WinSCP<i class="bi bi-box-arrow-up-right"></i></a> program to access and copy the data.
                </p>

                <p>
                    <strong>On Linux <i class="fab fa-linux"></i> / macOS <i class="fab fa-apple"></i></strong>, you can use for example the rsync utility: <br/>
                    <code>rsync -av --progress [username]@("@")@Exp.Storage.Target .</code>
                </p>
            }

        </div>
    </section>
}

@if (!string.IsNullOrEmpty(Exp.Processing.ProcessingEngine))
{
    <section class="card mx-0 my-1">
        <div class="card-header">
            <span class="fw-bold">Processing - @_workflow?.Title</span>
        </div>
        
        <div class="card-body d-flex flex-nowrap">

            <div class="flex-static-30">
                <NullAware Value="_workflow">
                    <WhenReady>
                        <WorkflowGeneralRenderer AsForm="@false" InspectResult="_inspectResult" Workflow="@context"></WorkflowGeneralRenderer>
                    </WhenReady>
                    <WhenNull>
                        <p class="small fst-italic">Processing setup details not available</p>
                    </WhenNull>
                </NullAware>
            </div>
            
            <div class="flex-grow-1">
                <DocumentPreview style="min-height: 50rem" Document="@Exp.Processing.ResultReport"></DocumentPreview>
            </div>

        </div>

    </section>
}


@code {

    [Parameter]
    public Experiment Exp { get; set; } = null!;

    [Parameter] public bool IsHeadlessPage { get; set; } = false;

    // For processing details render
    private Workflow? _workflow;
    private DynamicFormTools.InspectResult? _inspectResult;

    protected override void OnParametersSet()
    {
        if (Exp == null) throw new ArgumentNullException(nameof(Exp));
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Exp.Processing.WorkflowRef != null)
        {
            _workflow = await WorkflowProvider.GetWorkflowByIdAsync(Exp.Processing.WorkflowRef, Exp.Organization);
            _inspectResult = DynamicFormTools.DynamicInspect(_workflow?.Data, Exp.Processing.Workflow, forceSet:false);
        }
    }

    // private string _GetIrodsFetchUnixOneliner()
    //     => $"curl -sSfL \n " +
    //        $"\"https://raw.githubusercontent.com/cemcof/cemcof.github.io/main/irods_fetch_unix.sh\" | \n" +
    //        $"bash -s -- \n " +
    //        $"--host \"{Exp.Storage.Target}\" \n " +
    //        $"-t \"{Exp.Storage.Token}\" \n " +
    //        $"-c \"{Exp.Storage.Path}\"";
    //
    private string _GetIrodsFetchUnixOneliner()
        => $"curl -sSfL \"https://raw.githubusercontent.com/cemcof/cemcof.github.io/main/irods_fetch_unix.sh\" " +
           $"| bash -s -- --host \"{Exp.Storage.Target}\" -t \"{Exp.Storage.Token}\" -c \"{Exp.Storage.Path}\"";

    private string _GetPowershellFetch()
        => "Invoke-Command -ScriptBlock ([Scriptblock]::Create((iwr \"https://raw.githubusercontent.com/cemcof/cemcof.github.io/main/irods_fetch_win.ps1\").Content)) " +
           $"-ArgumentList ($args + @('--host', '{Exp.Storage.Target}', '-t', '{Exp.Storage.Token}', '-c', '{Exp.Storage.Path}'))";
    
    private string _SshTarget() => $"{Exp.Storage.Target}:{Exp.Storage.Path}";

    // Raw string literals multiline not supported in blazor

    // private MarkupString _GetIrodsFetchUnixOneliner()
    //         => (MarkupString)$"""
    //            curl -sSfL \
    //              "https://raw.githubusercontent.com/cemcof/cemcof.github.io/main/irods_fetch_unix.sh" | \
    //            bash -s -- \
    //              --host "{Exp.Storage.Target}" \
    //              -t "{Exp.Storage.Token}" \ 
    //              -c "{Exp.Storage.Path}"
    //            """;
    //         
    //     private string _GetPowershellFetch()
    //         => $"""
    //            curl -sSfL \
    //              "https://raw.githubusercontent.com/cemcof/cemcof.github.io/main/irods_fetch_unix.sh" | \
    //            bash -s -- \
    //              --host "{Exp.Storage.Target}" \
    //              -t "{Exp.Storage.Token}" \ 
    //              -c "{Exp.Storage.Path}
    //            """;
}