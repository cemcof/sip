@using sip.Experiments.Model
@using sip.Experiments.Workflows

@inject ExperimentEngine ExperimentEngine
@inject IWorkflowProvider WorkflowProvider
@inject IOptionsMonitor<ExperimentsOptions> ExperimentsOptions

<div class="card m-0">

    <div class="card-header @ExperimentsOptions.Get(Exp.Organization).FindTheme(Exp) d-flex align-items-center justify-content-between">
        
        <h1>@Exp.SecondaryId - @Exp.Sample.Name </h1>

        @if (IsHeadlessPage)
        {
            // From headless page we can print 
            <a class="btn btn-outline-light print-btn" href="javascript:window.print()"><i class="bi bi-printer"></i> Print / PDF</a>
        }
        else
        {
            <a href="/experiment/@Exp.Id" target="_blank"><i class="bi fs-3 text-white bi-box-arrow-up-right"></i></a>
        }
    
    </div>

    <div class="card-body">
            
        <table class="table table-sm table-striped">
            <tbody>
                <tr>
                    <th scope="row">Center</th>
                    <td>@Exp.Organization.Abbreviation</td>
                </tr>
                <tr>
                    <th scope="row">Operator</th>
                    <td>@Exp.Operator.Fullcontact</td>
                </tr>
                <tr>
                    <th scope="row">User</th>
                    <td>@Exp.User.Fullcontact</td>
                </tr>
                <tr>
                    <th scope="row">Experiment started</th>
                    <td>@Exp.DtCreated</td>
                </tr>
                <tr>
                    <th scope="row">Instrument</th>
                    <td>@Exp.InstrumentName</td>
                </tr>
                <tr>
                    <th scope="row">Experiment technique</th>
                    <td>@Exp.Technique</td>
                </tr>
                <tr>
                    <th scope="row">Sample</th>
                    <td>@Exp.Sample.Name</td>
                </tr>
                <tr>
                    <th scope="row">Sample keywords</th>
                    <td>@Exp.Sample.KeywordsStr</td>
                </tr>
            
            @if (!string.IsNullOrWhiteSpace(Exp.Notes))
            {
                <tr>
                    <th>Operator notes</th>
                    <td>@Exp.Notes</td>
                </tr>
            } 
            
            </tbody>
        </table>
    </div>
    
</div>

<DataStateCard Exp="Exp" OnPublicationRequest="@((exp) => ExperimentEngine.RequestPublicationAsync(exp))"></DataStateCard>

@if (Exp.Storage.State is StorageState.Idle or StorageState.Transfering or StorageState.Archived)
{
    <section class="card m-0">
        
        <div class="card-header fw-bold">
            Data access
        </div>
        
        <div class="card-body">
            
            @if (Exp.Storage.StorageEngine.StartsWith("irods"))
            {
                <IrodsDataAccessView ExperimentStorage="@Exp.Storage" />
            }

            @if (Exp.Storage.StorageEngine.StartsWith("fs"))
            {
                <FsDataAccessView ExperimentStorage="@Exp.Storage" />
            }

        </div>
    </section>
}

@if (!string.IsNullOrEmpty(Exp.Processing.ProcessingEngine))
{
    <section class="card mx-0 my-1">
        <div class="card-header">
            <span class="fw-bold">Processing - @_workflow?.Title</span>
        </div>
        
        <div class="card-body">

            <div class="flex-static-30">
                <NullAware Value="_workflow">
                    <WhenReady>
                        <WorkflowGeneralRenderer AsForm="@false" InspectResult="_inspectResult" Workflow="@context"></WorkflowGeneralRenderer>
                    </WhenReady>
                    <WhenNull>
                        <p class="small fst-italic">Processing setup details not available</p>
                    </WhenNull>
                </NullAware>
            </div>
            
            <div class="flex-grow-1">
                <DocumentPreview style="min-height: 50rem" Document="@Exp.Processing.ResultReport"></DocumentPreview>
            </div>

        </div>

    </section>
}


@code {

    [Parameter]
    public Experiment Exp { get; set; } = null!;

    [Parameter] public bool IsHeadlessPage { get; set; } = false;

    // For processing details render
    private Workflow? _workflow;
    private DynamicFormTools.InspectResult? _inspectResult;

    protected override void OnParametersSet()
    {
        if (Exp == null) throw new ArgumentNullException(nameof(Exp));
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Exp.Processing.WorkflowRef != null)
        {
            _workflow = await WorkflowProvider.GetWorkflowByIdAsync(Exp.Processing.WorkflowRef, Exp.Organization);
            _inspectResult = DynamicFormTools.DynamicInspect(_workflow?.Data, Exp.Processing.Workflow, forceSet:false);
        }
    }
}