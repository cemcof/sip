@using System.Text.Json
@using DocumentFormat.OpenXml.Presentation
@using sip.Experiments.Model
@using sip.Experiments.Workflows
@using Microsoft.Extensions.Configuration.Json

@inject ILogger<DataProcessingPart> Logger
@inject IWorkflowProvider WorkflowProvider
@inject IOptionsMonitor<EnginesOptions> EngineOptions

@if (ShowWorkflowSetup) 
{
    <GroupVertical>
        <Header>
            Data processing
        </Header>
        <Body>
        <div class="wf-header">
            <CEditForm TModelType="ExperimentIdle" FormFooter="@(CEditForm<ExperimentIdle>.EmptyFooter)" Context="ctxxx">
                <InputAligner Flex="0 0 10rem, 1">
                    <CDropdown TValue="Workflow"
                               Context="wfctx"
                               OnValueSet="@SelectWorkflow"
                               DisplayName="Workflow template"
                               @bind-Value="@SelectedWorkflow"
                               ItemsProvider="_WorkflowTemplateItemsProvider"
                               Placeholder="<no workflow> click to select workflow if processing is desired">
                        <ItemTemplate>
                            <div class="py-1">
                                <span class="fw-bold">@wfctx.Title</span> <br/>
                                <span class="small">@wfctx.Description.Truncate(200)</span> <br/>
                                <span>
                                    @foreach(var tag in wfctx.Tags)
                                    {
                                        <span class="badge bg-secondary me-1">@tag</span>
                                    }
                                </span>
                                
                            </div>
                        </ItemTemplate>
                        
                        <SelectedItemTemplate Context="selWf">
                            <div>@selWf.Title</div>
                        </SelectedItemTemplate>

                    </CDropdown>
                </InputAligner>
            </CEditForm>
        </div>
        
        <div class="wf-body">
            @if (SelectedWorkflow is not null && _inspectResult is not null) 
            {
                <WorkflowGeneralRenderer Workflow="@SelectedWorkflow"
                                         InspectResult="@_inspectResult">
                </WorkflowGeneralRenderer>
            }
            else
            {
                <div class="text-center text-info">You have not selected any workflow, the job will run only as data transfer without
                    processing</div>
            }
        </div>
        
        </Body>
    </GroupVertical>
}


@code {
    private bool ShowWorkflowSetup => Exp.Processing.State is not ProcessingState.Disabled;

    [Parameter] public Experiment Exp { get; set; } = null!;
    private Experiment? _prevExp = null;

    [Parameter] public ExperimentOptions ExpMeta { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (!ReferenceEquals(_prevExp, Exp))
        {
            SelectedWorkflow = null;
        }

        _prevExp = Exp;
    }


    // Processing / workflow setup state
    private Workflow? _selectedWorkflow;
    private DynamicFormTools.InspectResult? _inspectResult;

    public Workflow? SelectedWorkflow
    {
        get => _selectedWorkflow;
        set
        {
            _selectedWorkflow = value;
            Logger.LogDebug("Selecting wf: {@Wf}", _selectedWorkflow);
            if (value is not null)
            {
                // Logger.LogDebug("WF data {} {}", value.Data, value.Data?.GetType());
                Logger.LogDebug("WF JSON: {}", JsonSerializer.Serialize(value.Data, new JsonSerializerOptions() {WriteIndented = true}));
                _inspectResult = DynamicFormTools.DynamicInspect(value.Data);
                Logger.LogDebug("APPLIED RESULT: {}", JsonSerializer.Serialize(_inspectResult.Target, new JsonSerializerOptions() {WriteIndented = true}));
                Exp.Processing.Workflow = _inspectResult.Target;
                Exp.Processing.WorkflowRef = value.Id;
                // Select processing engine - look for it in the tags, use configured engines to determine which tag is the engine
                Exp.Processing.ProcessingEngine = EngineOptions
                    .Get(Exp.Organization)
                    .Processing
                    .First(e => value.Tags.Contains(e.Id))
                    .Id;
                Logger.LogDebug("Values applied: source={@Source} target={@Target}", value.Data, Exp.Processing.Workflow);
            }
            else
            {
                Exp.Processing.Workflow = null;
                Exp.Processing.WorkflowRef = null;
                Exp.Processing.ProcessingEngine = string.Empty;
                Logger.LogDebug("Workflow cleared");
            }

        }
    }

    private void SelectWorkflow(Workflow pipeline)
    {
        SelectedWorkflow = pipeline;
    }

    private async ValueTask<ItemsProviderResult<Workflow>> _WorkflowTemplateItemsProvider(ItemsProviderRequest request, string? searchstring)
    {
        var wfs = await WorkflowProvider.GetWorkflowsAsync(new WorkflowFilter(
                Organization: Exp.Organization,
                Tags: Exp.Processing.WorkflowTags)
            )
            .ToListAsync();

        var result = wfs.Where(kv =>
                StringUtils.IsFilterMatchAtLeastOneOf(searchstring, kv.Title, kv.Description))
            .ToList();

        return new ItemsProviderResult<Workflow>(result, result.Count);
    }

}

