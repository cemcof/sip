@using sip.Experiments.Model
@inject IConfiguration Configuration
@inject ILogger<DataLifecyclePart> Logger

<GroupVertical>
    <Header>Data Lifecycle</Header>
    <Body>

    <div class="big-radiolist">
        @* TODO get rid of this wrapper by supporting custom class on input element *@
        <CRadioList TValue="DataLifecycleOptions" @bind-Value="DataLifecycle"
                    ItemsProvider="@ItemTools.StaticItems(ExpMeta.DataLifecyclesOrdered)"
                    HasLabel="@false">
            <ItemTemplate Context="radioctx">
                <div class="fake-radio"></div>
                <div>
                    <div class="heading">@radioctx.DisplayName</div>
                    <div class="description">@radioctx.Tip</div>
                </div>

            </ItemTemplate>
        </CRadioList>
    </div>

    @* Render all desired properties from lifecycle *@
    <CascadingValue TValue="string" Name="filebrowser_scope" Value="@Exp.Type">
        @foreach (var prop in _dataLifecycleInspectResult.Elements)
        {
            <DynamicFormElement Setup="@prop.Item1" BindPoint="@prop.Item2"></DynamicFormElement>
        }
    </CascadingValue>
    </Body>
</GroupVertical>

@code {

    [Parameter]
    public Experiment Exp { get; set; } = null!;
    private Experiment? _prevExp = null;
    

    [Parameter]
    public ExperimentOptions ExpMeta { get; set; } = null!;
    
    [Parameter] public EventCallback OnLifecycleChanged { get; set; }
    
    protected override void OnParametersSet()
    {
        // Experiment changed? 
        if (!ReferenceEquals(_prevExp, Exp))
        {
            DataLifecycle = ExpMeta.DataLifecyclesOrdered.First();
        }

        _prevExp = Exp;
    }


    private DataLifecycleOptions _dataLifecycle = null!;
    private DynamicFormTools.InspectResult _dataLifecycleInspectResult = null!;

    public DataLifecycleOptions DataLifecycle
    {
        get => _dataLifecycle;
        set
        {
            _dataLifecycle = value;
            _dataLifecycleInspectResult = DynamicFormTools.DynamicInspect(value.SetupDyn, Exp);
            OnLifecycleChanged.InvokeAsync();
            Logger.LogTrace("SetupDyn: {@SetupDyn}, len {Len}, exp {@Exp}", _dataLifecycleInspectResult.Elements, _dataLifecycleInspectResult.Elements.Count, Exp);
            Logger.LogTrace("Exp after setup: wftags={@WfTags}, procstate={ProcState}, patternsstor={@Patt}", Exp.Processing.WorkflowTags, Exp.Processing.State, Exp.DataSource.SourcePatterns);
        }
    }

}