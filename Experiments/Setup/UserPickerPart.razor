@using sip.Experiments.Model
@inject AppUserManager UserManager


<GroupVertical>
    <Header>
        <div class="space-between-panel">
            <div>
                <strong>User</strong>
                <small class="small small-tip">- contact information of the data owner</small>
            </div>
                        
            <div><a href="javascript:void(0)" @onclick="_sameAsOperatorClick">Same as operator</a></div>
        </div>
        
        <CDropdown HasLabel="@false" ItemsProvider="_UsersProvider" TValue="AppUser" @bind-Value="@Exp.User">
            <ItemTemplate Context="user">
                <div class="icon-item-template">
                    <div><i class="bi bi-person"></i></div>
                    <div>
                        @user <br/>
                        <small>@user.PrimaryContact.Affiliation</small>
                    </div>
                </div>
            </ItemTemplate>
            
            <Footer>
                @if (context.State is not CDropdown<AppUser>.DropdownState.AlternativeMode)
                {
                    <button class="btn btn-outline-primary" @onclick="@context.EnterAltMode">New user</button>
                }
            </Footer>

            <AlternativeBody Context="dropdown">
                 <CEditForm TModelType="NewUserModel" Context="form"
                           OnSubmit="@((p) => _createUserSubmit(p, dropdown))"
                           OnCancel="@(() => dropdown.SelectItem(null))">
                     <UserCreateForm Model="@form.Model" />
                </CEditForm>
            </AlternativeBody>

        </CDropdown>
        
        @* <DynamicFormElement class="inline noalign" Key="@(nameof(Experiment.AccessRoute))" ValueTarget="@Exp" Setup="@ExpMeta.Info[nameof(Experiment.AccessRoute)]"></DynamicFormElement> *@
    </Header>
</GroupVertical>

@code {
    [Parameter]
    public Experiment Exp { get; set; } = null!;
    
    [Parameter] public ExperimentOptions ExpMeta { get; set; } = null!;
    
    private void _sameAsOperatorClick()
    {
        Exp.User = Exp.Operator;
    }
    
    private async ValueTask<ItemsProviderResult<AppUser>> _UsersProvider(ItemsProviderRequest request, string? searchstring)
    {
        var users = await UserManager.GetUsersAsync(request.ToFilter(searchstring));
        return new ItemsProviderResult<AppUser>(users.Items, users.TotalCount);
    }
    
    // Handle creating new users 
    private Task _onNewUserClick(CDropdown<AppUser> dropdownComponent)
    {
        dropdownComponent.EnterAltMode();
        return Task.CompletedTask;
    }

    private async Task _createUserSubmit(NewUserModel appUser, CDropdown<AppUser> dropdown)
    {
        await UserManager.NewUserAsync(appUser);
        // Add to lab user role 
        await UserManager.EnsureUserInRole(UserInRole.FromUser<LabUserRole>(appUser.UserDetails, Exp.Organization));
        await dropdown.SelectItem(appUser.UserDetails);
    }
}