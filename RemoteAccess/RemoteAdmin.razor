@inherits OrganizationComponentBase

@using sip.Experiments
@using sip.Userman

@inject ILogger<RemoteAdmin> Logger
@inject IRemoteAccess RemoteAccess
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<ComponentRenderHelper ActionProvider="@(() => RemoteAccess.GetRemoteAccessStatus(Organization))" RefreshInterval="@TimeSpan.FromSeconds(5)" >
    <Available Context="remoteStatus">
        <div class="remote-admin-container">
            @foreach (var subj in remoteStatus.AvailableConnections)
            {
                <div class="instrument-container border">
                    <div class="subj-header @subj.Key.DisplayTheme">
                        @subj.Key.Name
                    </div>
                    
                    <div class="instrument-body">
                        <Each Items="@subj.Value" class="connection-items-container">
                            <Item Context="conn">
                                <div class="connection-item">
                                    <div class="connection-item-header">
                                        <div>@conn.Name</div>
                                        <div class="btn-group btn-group-sm">
                                            <button @onclick="@(() => SessionConnect(subj.Key, conn))" class="btn btn-outline-primary btn-sm">Connect</button>
                                            <button @onclick="@(() => SessionConnect(subj.Key, conn, popup:true))" class="btn btn-outline-primary btn-sm">Connect <i class="bi bi-box-arrow-up-right"></i></button>
                                        </div>
                                    </div>

                                    <Each class="connection-item-sessions" Items="@remoteStatus.GetActiveSessions(subj.Key, conn).ToList()">
                                        <Item Context="sess">
                                            <div class="subj-item">
                                                <div class="user-identif fw-bold" title="@sess.ForUser.Id">@sess.ForUser.Firstname @sess.ForUser.Lastname</div>
                                                <div class="small">
                                                    Since: @sess.From.StandardFormat() <br/>
                                                    Until: @sess.Until.StandardFormat()
                                                </div>

                                                <div class="btn-group btn-group-sm">
                                                    <button @onclick="@(() => SessionJoin(sess))" class="btn btn-outline-primary btn-sm">Join</button>
                                                    <button @onclick="@(() => SessionJoin(sess, popup:true))" class="btn btn-outline-primary btn-sm">Join <i class="bi bi-box-arrow-up-right"></i></button>
                                                    <button @onclick="@(() => RemoteAccess.KillSession(sess))" class="btn btn-outline-danger btn-sm">Kill</button>
                                                </div>
                                            </div>
                                        </Item>
                                    </Each>
                                </div>
                            </Item>
                            
                            <Empty>
                                <small>No connections available</small>
                            </Empty>
                        </Each>
                        
                    </div>
                </div>
            }
        </div>
    </Available>
    
    <NotAvailable>
        <div class="alert alert-danger text-center">Remote access is not available at the moment</div>
    </NotAvailable>
</ComponentRenderHelper>

@code {
    
    private async Task SessionJoin(RemoteAccessSession session, bool popup = false)
    {
        var cp = AuthUser;
        var openSessionRequest = new RemoteAccessSessionRequest(
            session.ForInstrument, 
            session.ForConnection,
            cp.ToUserClientInfo(),
            false, 
            session.Until
            );
        
        var newSession = await RemoteAccess.JoinSession(session, openSessionRequest);

        await _Redirect(newSession.TargetUrl, popup);
    }
    
    private async Task SessionConnect(IInstrument instrument, RemoteConnectionInfo connection, bool popup = false)
    {
        var cp = AuthUser;
        
        var openSessionRequest = new RemoteAccessSessionRequest(
            instrument,
            connection,
            cp.ToUserClientInfo(),
            false, 
            DateTime.UtcNow.AddDays(1)
            );

        var session = await RemoteAccess.OpenSession(openSessionRequest);
        
        await _Redirect(session.TargetUrl, popup);
    }

    private async Task _Redirect(string target, bool popup = false)
    {
        if (popup)
        {
            await JsRuntime.InvokeVoidAsync("open", target, "_blank");
        }
        else
        {
            NavigationManager.NavigateTo(target, forceLoad:true);
        }
    }

}