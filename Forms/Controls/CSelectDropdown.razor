@* This is a dropdown input component that renders as default browser select *@
@* Does not support searching (but browser usually provide some native searching by typing first letter) *@
@* Does not support item templates - options in select renders only as simple strings. *@
@* Does not support footer *@
@* Does not support loading on scrolling (always load everything) *@
@* To support these things, use more sophisticated component CDropdown that does not render as native browser select but has  *@
@* custom rendering logic implemented. *@

@typeparam TItem
@inherits CInputBase<TItem>
@inject ILogger<CSelectDropdown<TItem>> Logger

<div class="form-group select-group cinput-container cselectdropdown-container rendering-strategy-@(RenderingStrategy) @(HasLabel ? "labeled" : "labelless") @(IsRequired ? "required" : "")">
    @if (HasLabel)
    {
        <div class="clabel-container" style="@GetFlexStyleForIndex(0)">
            <CLabelAndTip Id="@InputId" Tip="@Tip">@DisplayName</CLabelAndTip>
        </div>
    }
    
    <div class="cinput-input-container" style="@GetFlexStyleForIndex(1)">
        <select
             readonly="@IsReadonly"
             disabled="@IsDisabled"
             class="@("form-control " + FieldCssClass) form-select"
             id="@(InputId)" name="@InputId" @bind="@CurrentValueAsString">

            @foreach (var opt in _currentOptions)
            {
                <option value="@opt.Key">@DisplayNameMapper(opt.Value)</option>
            }
        </select>

    </div>
</div>


@code {
    [Parameter]
    public ItemsProviderDelegate<TItem>? ItemsProvider { get; set; }
    private ItemsProviderDelegate<TItem> _itemsProvider = null!;
    
    [Parameter] public IEqualityComparer<TItem> EqualityComparer { get; set; } = EqualityComparer<TItem>.Default; 

    [Parameter]
    public Func<TItem, string> DisplayNameMapper { get; set; } = value => value?.ToString().Humanize() ?? "";

    private Dictionary<string,TItem> _currentOptions = new();

    protected override async Task OnParametersSetAsync()
    {
        Logger.LogTrace("OnParametersSetAsync for CSelectDropdown");  
        // Try to gather options from the render attribute if no items at all are provided and dropdown uses simple strings
        // ReSharper disable once ConditionIsAlwaysTrueOrFalse
        // Items provider might be null here because we are still handling parameters
        if (ItemsProvider is null)
        {
            var items = ModelPropertyType.GetCustomAttribute<SelectionAttribute>()?.GetKeyValues().ToList() ?? new List<KeyValuePair<string, string>>();
            if (typeof(TItem) == typeof(string))
            {
                _itemsProvider = _ => ValueTask.FromResult(
                    new ItemsProviderResult<TItem>(
                            items.Select(i => i.Key).Cast<TItem>(), items.Count
                        )
                    );
                
                DisplayNameMapper = value => items.First(x => x.Key.Equals(value)).Value;
            }
            else if (typeof(TItem) == typeof(int))
            {
                _itemsProvider = _ => ValueTask.FromResult(
                    new ItemsProviderResult<TItem>(
                        items.Select(i => (TItem)(object)int.Parse(i.Key)), items.Count
                        )
                    );
                DisplayNameMapper = value => items.First(x => Convert.ToInt32(x.Key).Equals(value)).Value;

            }
            else
            {
                throw new InvalidOperationException("Dropdown cannot find any item source");
            }
        }
        else
        {
            _itemsProvider = ItemsProvider;
        }
        
        
        // Load items 
        var result = await _itemsProvider(new ItemsProviderRequest(default, Int32.MaxValue, default));
        var resultItems = result.Items.ToList();

        try
        {
            string KeySelector(TItem i)
            {
                var formatValue = (string) BindConverter.FormatValue(i)!;
                Logger.LogTrace("KeySelector for {Item} is {FormatValue}", i, formatValue);
                return formatValue;
            }

            _currentOptions = resultItems.ToDictionary(KeySelector, i => i);
        }
        catch (Exception ex) when (ex is ArgumentException or InvalidOperationException)
        {
            // The way to covert TItem to string is either:
            // - not defined (InvalidOperationException thrown from BindConverter)
            // - defined, but not producing unique values (ArgumentException throw from ToDictionary)
            // Therefore - use guids
            var lastOptions = _currentOptions;
            // But we need special care for equality
            string GetGuid(TItem item)
            {
                var eqItemKey = lastOptions.FirstOrDefault(
                    kvp => EqualityComparer.Equals(kvp.Value, item)).Key;
                
                Logger.LogTrace("GetGuid for {Item}, {EqItemKey} is null={IsNull}", 
                    item, eqItemKey, eqItemKey is null);
                return eqItemKey ?? Guid.NewGuid().ToString();
            }
            _currentOptions = resultItems.ToDictionary(GetGuid, i => i);
        }
    }

    protected override string? FormatValueAsString(TItem? value)
    {
        Logger.LogTrace("FormatValueAsString for {Value}", value);
        if (value is null) return null;
        var opt = _currentOptions.FirstOrDefault(kvp => EqualityComparer.Equals(value, kvp.Value));
        Logger.LogTrace("FormatValueAsString for {Value} found {Key}", value, opt.Key);
        return opt.Key;
    }


    protected override bool TryParseValueFromString(string? value, out TItem result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (value is not null && _currentOptions.ContainsKey(value))
        {
            result = _currentOptions[value];
            validationErrorMessage = null;
            return true;
        }

        throw new InvalidOperationException();
    }
}